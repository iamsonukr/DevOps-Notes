-> Docker make it easy to create duplicate of environemt

-> We make container using docker and do all the configuratation inside that container for example the OS , the MongoDB version etc.
-> After creating the container we share the container with out team members
-> Docker deamon is the tool responsible for all the docker task like spinning up the containers, pull images , create images
-> Docker desktop is the GUI to show all the containers and Images currently active

-> To run the docker images we need docker container
-> Containers run the images and they are isolated from each other
-> We can run the same image in different containers

--------------------------------------------DOCKER COMMANDS-------------------------------------------

Your docker is installed in Ubantu operating system > Go inside Ubantu first before starting DOCKER
type wsl in terminal


1> Start the docker deamon
sudo dockerd

2> Run hello world in docker
docker run hello-world

3> Docker run a continer in interactive mode which has ubantu in it
docker run -it ubuntu
By name
docker run -it --name my-conatiner busybox


4>List all running docker containers
docker container ls
docker ps

5>List all containers in docker
docker container ls -a
or
docker ps -a

6> Start a container
docker start containerName

7> Stop a container
docker stop containerName


8> Get the folder Structure of  a container without running the container
docker exec containerName ls

9> Get inside a continer with the terminal in it.
docker exec -it containerName bash

10> Open the file
cat main.js

10> Logout
Ctrl + D

------------------------------------------------PORT MAPPING----------------------------------------------------

11> Export container port to local Port
docker run -it -p 1025:1025 mailhog/mailhog
docker run -it -p <your port> | <default port> <ImageName>

12> Exposing multiple ports
docker run -it -p <your port 1> | <default port 1> -p <your port 2> | <default port 2> <ImageName>

13> Passing environemt variable
docker run -it -p 1025:1025 -e key=value -e key=value mailhog/mailhog


-------------------------------------14> Creating Docker project ---------------------------------------

AFTER COMPLETGIN THE PROJECT

1> Step One
Create a file named Dockerfile

2> Step two
    i> Install the base image | operating system
    ii> Install the resources | application like nodeJS
    iii> Copy the files
    iv> Install the dependencies
    v> Define the entry point

Example file: /NodeProject/Dockerfile

1> Login the docker
docker login

2> Build the image
docker build -t ImageName Directiry 
docker build -t sonudocker .

3> Tag the image 
docker tag sonudocker thesonukr/maiden:latest

5> Push the image to the dockerhub
docker push dockerhubusername/imagename:tag
docker push thesonukr/maiden:latest2

6> Run this docker in you local repo
docker run sonudocker

)> Pull the latest image from the docker
docker pull thesonukr/maiden:latest2

)> 
-------------------------------------------------15> Caching the layer----------------------------------------

Caching the layer is about saving the data that has been already extracted, So that it could be reused again in the next execution
- Layers are the sequence of code written in the Dockerfile
- These layers are saved once they are executed and do not executed if run again unless there is change in the code

---------------------------------------------------Docker Compose---------------------------------------------
16> Docker Compose-------------

While running multiple services we need to set up docker componse file.
Docker Compose is a tool that allows you to define and manage multiple containers as a single application. It is particularly useful
when you have an application with multiple services (like a web server, database, and a cache system) that need to work together
To setup docer compose 

1> Step one
Create docker-compose.yml

2> Step two
Write all the configuration syntax wise

3> Step three 
sudo docker compose

-> Stop the containers
CTRL+C 

-> docker compose down 
remote all the containers

----------------------------------------------------Ubuntu Commands------------------------------------------------

->List the subdirectories
ls

->Make Folder
mkdir new Folder


_______________________________________________________PART TWO____________________________________________________
-----------------------------------------------------DOCKER NETWORK------------------------------------------------

-> By default Docker connect your container with internet using bridge
-> Bridge helps to communicate the differnt containers within the same host 


1> Check you container connectivity
docker network inspect bridge

2> Check all network active on the system
docker network ls


3> Container will not have access to the internet
docker run -it --network=none busybox


4>Container will access host Network to the internet
docker run -it --networ=host busybox

5> Create your own Network
docker network create -d bridge myNetwork

----
6> Make a container named tony stark connected to a custom network with ubantu installed in it
docker run -it --network=myNetwork --name=tonyStark ubuntu

7> Create another container drStrange with same network and busybox in it 
docker run -it --network=myNetwork --name=drStrange busybox

/// BOTH of these containers can communicate with each other because both of them are running in the same network
-----

-----------------------------------Volume Mounting--------------------------

-> When we create a delete a container it deletes all the memory stored in the container . To prevent this from happening we have docker volume.
-> In docker volume we give the container access to a folder in our host machine where it can store and manage data which stays in the system even if the continer gets removed.
-> Giving the contianer access to the folder in host machine is called mounting the folder to a contianer

1> Docker command for creating a ubuntu container with folder access of dockerdock to home/abc of ubuntu 
docker run -it -v "/mnt/c/Users/M.R Enterprises/Desktop/dockerdock:/home/abc" ubuntu

2> You can also create your own volume to mount in the container
docker volume create myvolume

3> To list all volumes created
docker volume ls

4> To inspect volume 
docker volume inspect myvolume

5> Use to volume to run the container
docker run -it -v myvolume:/home/abc ubuntu


-------------------------------------------DOCKER MULTI STAGE BUILD---------------------------------

Multi Stage Build mens dividing the build process in multiple stages 



