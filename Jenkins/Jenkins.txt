Build Deplyoment process
Build -> Test -> Deploy
By default all process is done manually. Since it is continuous process it is very tiresome process for team

Dev ops => Development Operations

Challanges in manual work (Deployemnt)
1> Dev write new code every day. Follow process every day 
2> Multiple environment / Dev ENV / Testing ENV
3> Process Comsuming 
4> Error Prone

In order to overcome these problems we use automation tools like 
1. Jenkins
2. Azure Pipelines

These sofware allows you to prepare scripts to automate the deployemnt process at each stage .
We can write code at each stage and can create new stage in between Build and Deploy

After the code get commited to GitHub , Devops team write/create the pipeline that what to do with the code at different stages
As soon the code get commited the , code automatically gets Build and Deployed based on the scripts written in the Jenkins

-----------------------------------------------------
Types of Environments

1> Dev Environment - The projects are developed in this environemnt only. Unit testing and Integration Testing are performed \
2> Quality Assurance Env - Testing Env . Testing the entire APP
3> User Acceptence Testing Env - 
4> Pilot ENv / Pre Production Env - Performance of the application is tested
5> Production Evn 


CI/CD Pipelines 
CI-> Continuous Integration - Build test Deploy
Continuous Integration is the automation to build and test application whenever new commits are pushed into the branch

CD-> Continuous Devlivery/Deplyoment - Release Build Deploy

    Continuous Devlivery - is Continuous Integration + Deploy application to production by 
    "clicking on a button " Release to customers is often but on DEMAND.

    Continuous Deplyoment - is Continuous Delivery but without human interaction    

Continuous Integration - is an automation to build and test application
whenever new commits are pushed into the branch.

Continuous Delivery - is Continuous Integration + Deploy application
to production by "click, " (Release to customers is often,but on demand).

Continuous Deployment - is Continuous Delivery but without human
intervention (Release to customers is on-going).
------------------------------------------JENKINS BY DURGESH-------------------------------------------------------------

Creating a task

1> Dashboard > All > New item
OPTIONS 
   This project is Parameterised 
    > Parameterised
   Build Triggers
    > Scheduling (* * * * ) /* https://crontab.cronhub.io/ */
    
Adding GitHub
1> Create New task
2> Source Code Management > Git > Repository URL 
    // This will clone the repo to the jenkins local server if jenkins is in local
    // view this in console output '' Building in workspace C:\ProgramData\Jenkins\.jenkins\workspace\GitDemo

3> Write the command to execute the file 

cd Jenkins
python test.py

--------------GITHUB AUTO BUILD-----------------

1> Create New task
2> Source Code Management > Git > Repository URL 
    // This will clone the repo to the jenkins local server if jenkins is in local
    // view this in console output '' Building in workspace C:\ProgramData\Jenkins\.jenkins\workspace\GitDemo

3> Write the command to execute the file 

4> Build Triggers > Poll SCM 
// this will check the server for any changes every minute and run the code if changes found

-------------------EMAIL NOTIFICATIONS------------------------

1> Dashboard > Manage Jenkins > Email Notification > Advance > use SMTP authentication >
2> Write email (Sender email) and password , 
3> For password > Google account > search app password > Create Poject > Name your project > It will create a password > Paste the password in the jenkins
4> Inside Project Configuration > Post-Build Action > Email Notification > Recipt emails

-------------- Jenkins Remote Server/ Updating website in Vercel ------------------------------

1> Create new > Git > Paste Repo >
2> Build Triggers Poll SCM > Set timing (* * * * *) for five minutes
3> Write the pipeline in Grovey

----------------------------------Manage Jenkins Users ---------------------

1> Dashboard > Mange Jenkins > users > Create new user

2> Install role based strategy plugin > 

3> Dashboard > Manage jenkins > Manage and assign Roles > Manage Roles > Create New Role with permission

4> Now > Mange Roles > Assign Role > Add User > Add the user Created in Step 1 with the role

-------------------------------- Maven ---------------------------------
Maven is a build automation tool used for java projects

1> Copy maven project git URL
2> Create new Job > Paste the link there
3> Install the maven Integration plugin 
4> Mange Jenkins > Tools > Maven Installation > Add Maven > Assing name and version
5> DashBoard > Maven Project > Configuration > Build Steps > Invoke Top level Maven Project targets > Assign version 


---------------------------Local Deployment of APP------------------------

MAVEN all
Build Steps > Execute Shell > java -jar C:\ProgramData\Jenkins\.jenkins\workspace\maven-demo\target\my-app-1.0-SNAPSHOT.jar

---------------------------TESTS RESULT GRAPH------------------------------


1>  DASHBOARD > PROJECT NAME > WORKSPACE > TARGET > SUREFIRE REPORTS >.XML ///THIS FILE CONTAINS ALL THE DATA OF PROGRAM
1> DAHSBOARD > PROJECT NAME > CONFIGURATION > ADD POST BUILD ACTIONS > Publish JUnit test result report >
2> PASTE THE ADDRESS OF .XML IN SUREFILES > target/surefire-reports/*.xml


---------------------------------- Archive Artifact ---------------------------------

//Download the .jar / .exe after the build is Successful

1> DAHSBOARD > PROJECT NAME > CONFIGURATION > Post Build Action > Archive the artifacts >
2> Files to Archive > target/*.jar
    Advance > Archive Artifects only if build is successful >

To download > 
Project name > Last Successful Artifect >

------------------------------------JENKINS PIPELINE------------------------------------

1> New Item > Pipeline > Configure > Pipeline > Write Pipeline

-> You can get sample pipeline from try pipeline file in the upper right of the pipeline box
-> Pipeline -> environemnt | tools | agnet | Stages-> Stage -> Steps -> 
-> Pipeline starts with the word pipeline{ after this we mention agent which is the server then we mention tools {0} Stages{ stage(){steps{ }}}}
-> For writing shell command starts with sh 'command' 
-> For writing shell command with multiple lines write sh ''' command '''
-> To retry write retry(3) {command}
    // This will try executing the the step command three times 
-> Timeout function is defined under timeout, it means that the code is ment to be executed in the provided timeframe or else it will not be executed
timeout(time:15, unit:'SECONDS'){
                    sh 'sleep 30'
                    }

-> To add credentials which are required in the pipeline ,go to > Dashboard > Manage Jenkins > Credentials > System > Global credentials (unrestricted)
-> For storing password > New Credential > Type Password in Secret > Type ID (This will be used as a variable in the Pipeline)
 environemnt{
        PASS=credentials (SECRET_KEY) // secret_key is the environemt variable set in the global
    }

pipeline {
    agent any

    tools{

    }

    environemnt{
        key="value"
        NAME="Sonu"
        PASS=credentials (SECRET_KEY) // secret_key is the environemt variable set in the global
    }

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
                // One line command
                sh ''
                // multiline commnad
                sh ''' 
                echo $NAME
                 '''
                // Function to retry
                retry(3) {
                    sh 'echo Trying'
                }
                // function to timeout
                timeout(time:15, unit:'SECONDS'){
                    sh 'sleep 30'
                }
            }
            ste
        }
    }
}



     
